#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MaxSize 20
#define BUS_NUM 10
#define ROUTE_NUM 48
#define STATION_NUM 17
using namespace std;
int ROUTES[ROUTE_NUM][4]=
{
    0,0,1,750,
    0,1,2,400,
    0,2,3,650,
    0,3,4,800,
    1,4,3,800,
    1,3,2,650,
    1,2,1,400,
    1,1,0,750,
    2,5,6,700,
    2,6,3,600,
    2,3,7,850,
    2,7,16,550,
    2,16,11,500,
    3,11,16,500,
    3,16,7,550,
    3,7,3,850,
    3,3,6,600,
    3,6,5,700,
    4,8,6,500,
    4,6,2,900,
    4,2,9,600,
    4,9,11,400,
    5,11,9,400,
    5,9,2,600,
    5,2,6,900,
    5,6,8,500,
    6,5,12,550,
    6,12,0,850,
    6,0,11,600,
    6,11,13,700,
    6,13,16,750,
    7,16,13,750,
    7,13,11,700,
    7,11,0,600,
    7,0,12,850,
    7,12,5,550,
    8,14,4,500,
    8,4,7,600,
    8,7,15,550,
    8,15,9,600,
    8,9,1,550,
    8,1,12,700,
    9,12,1,700,
    9,1,9,550,
    9,9,15,600,
    9,15,7,550,
    9,7,4,600,
    9,4,14,500,
};
char *BUSES[BUS_NUM][3]=
{
    "1路上行","1站","5站",
    "1路下行","5站","1站",
    "2路上行","6站","12站",
    "2路下行","12站","6站",
    "3路上行","9站","12站",
    "3路下行","12站","9站",
    "4路上行","6站","17站",
    "4路下行","17站","6站",
    "5路上行","15站","13站",
    "5路下行","13站","15站",
};
char *STATIONS[STATION_NUM]=
{
    "1站","2站","3站","4站","5站",
    "6站","7站","8站","9站","10站",
    "11站","12站","13站","14站","15站",
    "16站","17站",
};
bool visited[STATION_NUM];
typedef struct Bus
{
    char *name;//公交名
    int start;//起点
    int end;//终点
}Bus;

typedef struct Route
{
    int station;//指向的站点索引号
    int bus;//公交索引号
    int distance;//两站之间公路的距离
    struct Route*next;//起始站点相同的，下一条下行路线
}Route;

typedef struct Station
{
    char *station;
    struct Route*routes;
}Station;

typedef struct BusMap
{
    Bus *buses;
    Station *stations;
    int station_num;
    int bus_num;
}BusMap;

BusMap g_BusMap;

void CreateMap()
{
    g_BusMap.bus_num=BUS_NUM;
    g_BusMap.buses=(Bus*)malloc(sizeof(Bus)*BUS_NUM);
    for(int i=0;i<BUS_NUM;i++)
    {
        g_BusMap.buses[i].name=BUSES[i][0];
        g_BusMap.buses[i].start=-1;
        g_BusMap.buses[i].end=-1;
    }
    g_BusMap.station_num=STATION_NUM;
    g_BusMap.stations=(Station*)malloc(sizeof(Station)*STATION_NUM);
    for(int i=0;i<STATION_NUM;i++)
    {
        g_BusMap.stations[i].station=STATIONS[i];
        g_BusMap.stations[i].routes=NULL;
    }
}

int FindBus(char *bus)
{
    for(int i=0;i<g_BusMap.bus_num;i++)
    {
        if(strcmp(g_BusMap.buses[i].name,bus)==0)
        {
            return i;
        }
    }
    return -1;
}

int GetBus(char *bus)
{
    int nBus=FindBus(bus);
    if(nBus==-1)
    {
        g_BusMap.buses=(Bus*)realloc(g_BusMap.buses,sizeof(Bus)*(g_BusMap.bus_num+1));
        Bus *pBus=g_BusMap.buses+g_BusMap.bus_num;
        pBus->name=bus;
        pBus->start=-1;
        pBus->end=-1;
        nBus=g_BusMap.bus_num;
        g_BusMap.bus_num++;
    }
    return nBus;
}

int FindStation(char *station)
{
    for(int i=0;i<g_BusMap.station_num;i++)
    {
        if(strcmp(g_BusMap.stations[i].station,station)==0)
            return i;
    }
    return -1;
}

int GetStation(char *station)
{
    int nStation=FindStation(station);
    if(nStation==-1)
    {
        g_BusMap.stations=(Station*)realloc(g_BusMap.stations,sizeof(Station)*(g_BusMap.station_num+1));
        Station *pStation=g_BusMap.stations+g_BusMap.station_num;
        pStation->station=station;
        pStation->routes=NULL;
        nStation=g_BusMap.station_num;
        g_BusMap.station_num++;
    }
    return nStation;
}

void AddBus(char*bus,char*pStart,char*pEnd)
{
    int nBus=GetBus(bus);
    int nStart=GetStation(pStart);
    int nEnd=GetStation(pEnd);
    Bus *pBus=g_BusMap.buses+nBus;
    pBus->start=nStart;
    pBus->end=nEnd;
}

void AddRoute(int nBus,int nStart,int nEnd,int distance)
{
    Station*pStStation=&g_BusMap.stations[nStart];
    Route*pStRoute=pStStation->routes;
    while(pStRoute!=NULL&&pStRoute->next!=NULL)
    {
        if(pStRoute->bus==nBus&&pStRoute->station==nEnd)
            return;
        pStRoute=pStRoute->next;
    }
    Route* pNewRoute=(Route*)malloc(sizeof(Route));
    pNewRoute->bus=nBus;
    pNewRoute->station=nEnd;
    pNewRoute->distance=distance;
    pNewRoute->next=NULL;
    if(pStRoute==NULL)
        pStStation->routes=pNewRoute;
    else
        pStRoute->next=pNewRoute;
}

int Is(int*buses,int name,int n)
{
    int i;
    for(i=0;i<n;i++)
        if(buses[i]==name)
            break;
    if(i==n)
        return 0;
    else return 1;
}

int QueryStation(char *station,int *buses)
{
    int nSta=FindStation(station);
    int nBus;
    Station*pstation=&g_BusMap.stations[nSta];
    Route*pRoute=pstation->routes;
    int num=0;
    while(pRoute!=NULL)
    {
        nBus=pRoute->bus;
        pRoute=pRoute->next;
        *(buses+num)=nBus;
        num++;
    }
    for(int i=0;i<g_BusMap.station_num;i++)
    {
        Station*qstation=&g_BusMap.stations[i];
        Route*qRoute=qstation->routes;
        while(qRoute)
        {
            if(qRoute->station==nSta)
            {
                nBus=qRoute->bus;
                if(Is(buses,nBus,num)==0)
                {
                    *(buses+num)=nBus;
                    num++;
                }
            }
            qRoute=qRoute->next;
        }
    }
    cout<<"@"<<station<<"@ "<<" 共"<<num<<"辆车经过:"<<endl;
    for(int j=0;j<num;j++)
    {
        cout<<g_BusMap.buses[buses[j]].name<<endl;
    }
    cout<<endl;
    return num;
}

void QueryBus(char *pBus,int*route)
{
    int nBus=FindBus(pBus);
    int nStart=g_BusMap.buses[nBus].start;
    int nEnd=g_BusMap.buses[nBus].end;
    route[0]=nStart;
    Station* pStation=&g_BusMap.stations[nStart];
    Route*pRoute=pStation->routes;
    int nStation=nStart;
    int num=1;
    while(nStation!=nEnd)
    {
        while(pRoute->bus!=nBus)
        {
            pRoute=pRoute->next;
        }
        nStation=pRoute->station;
        route[num]=nStation;
        num++;
        pStation=&g_BusMap.stations[nStation];
        pRoute=pStation->routes;
    }
    cout<<"#"<<pBus<<"# "<<"从 "<<g_BusMap.stations[nStart].station<<" 开往 "<<g_BusMap.stations[nEnd].station<<" 共经"<<num<<"个站点:"<<endl;
    cout<<endl;
    cout<<g_BusMap.stations[route[0]].station;
    for(int j=1;j<num;j++)
    {
        cout<<"->"<<g_BusMap.stations[route[j]].station;
    }
    cout<<endl<<endl;
}

typedef struct Path
{
    Route r[MaxSize];
    int transfer;
    int distance;
    int top;
}Path;

void Clear()
{
    for(int i=0;i<STATION_NUM;i++)
        visited[i]=false;
}

void Init(Path *&p,char *s)
{
    p=(Path*)malloc(sizeof(Path));
    p->r[0].bus=-1;
    p->r[0].distance=0;
    p->r[0].next=NULL;
    p->r[0].station=FindStation(s);
    p->transfer=-1;
    visited[FindStation(s)]=true;
    p->top=0;
}

void Push(Path *&p,Route*s)
{
    if(p->r[p->top].bus!=s->bus)
        p->transfer++;
    p->top++;
    p->r[p->top].bus=s->bus;
    p->r[p->top].distance=s->distance;
    p->r[p->top].next=s->next;
    p->r[p->top].station=s->station;
    p->distance+=s->distance;
}
void Pop(Path *&p,Route*&s)
{
    s=(Route*)malloc(sizeof(Route));
    s->bus=p->r[p->top].bus;
    s->distance=p->r[p->top].distance;
    s->next=p->r[p->top].next;
    s->station=p->r[p->top].station;
    p->distance-=s->distance;
    p->top--;
    if(p->r[p->top].bus!=s->bus)
        p->transfer--;
}

void Show(Path *p)
{
    if(p->transfer<=1)
    {
        cout<<g_BusMap.stations[p->r[0].station].station;
        for(int i=1;i<=p->top;i++)
        {
            cout<<"--"<<"["<<g_BusMap.buses[p->r[i].bus].name<<"]"<<"-->"<<g_BusMap.stations[p->r[i].station].station;
        }
        cout<<endl;
        cout<<"该路线总距离："<<p->distance<<" 换乘次数："<<p->transfer<<endl<<endl;
    }
}

void QueryRoutes(char *pStart,char *pEnd,Path *path)
{
    int nStart=GetStation(pStart);
    int nEnd=GetStation(pEnd);
    int n=nStart;
    Station* pStation=&g_BusMap.stations[nStart];
    Route*pRoute=pStation->routes;
    if(n==nEnd)
    {
        Show(path);
    }
    else{
    for(;pRoute!=NULL;pRoute=pRoute->next)
    {
        if(!visited[pRoute->station])
        {
            visited[pRoute->station]=true;
            Push(path,pRoute);
            QueryRoutes(g_BusMap.stations[pRoute->station].station,pEnd,path);
        }
    }
    }
    Pop(path,pRoute);
    visited[pRoute->station]=false;
}

int main()
{
    CreateMap();
    for(int i=0;i<BUS_NUM;i++)
        AddBus(BUSES[i][0],BUSES[i][1],BUSES[i][2]);
    for(int j=0;j<ROUTE_NUM;j++)
        AddRoute(ROUTES[j][0],ROUTES[j][1],ROUTES[j][2],ROUTES[j][3]);
    int pp;
    int route[10];
    char b[10];
    int bbb[10];
    char sta[10];
    do
    {
        cout<<"========公交管理系统========"<<endl;
        cout<<"1.查询公交线路"<<endl;
        cout<<"2.查询站点信息"<<endl;
        cout<<"3.查询两个站点公交线路"<<endl;
        cout<<"0.退出"<<endl;
        cout<<"请输入操作编号(0~3):"<<endl;
        cin>>pp;
        switch(pp)
        {
        case 1:
            {
                cout<<"========查询公交线路========"<<endl;
                cout<<"请输入要查询的公交名:";
                cin>>b;
                cout<<"----------------------------"<<endl;
                QueryBus(b,route);
            }
            break;
        case 2:
            {
                cout<<"========查询站点信息========"<<endl;
                cout<<"请输入要查询的站点名:";
                cin>>sta;
                cout<<"----------------------------"<<endl;
                QueryStation(sta,bbb);
            }
            break;
        case 3:
            {
                cout<<"========查询两个站点公交线路========"<<endl;
                char start[10];
                char end[10];
                cout<<"请输入要查询的起点：";
                scanf("%s",start);
                cout<<"请输入要查询的终点：";
                scanf("%s",end);
                Path* path;
                Clear();
                Init(path,start);
                cout<<"从 "<<start<<" 开往 "<<end<<" 找到以下线路："<<endl<<endl;
                QueryRoutes(start,end,path);
                free(path);
            }
            break;
        default:;
        }
    }while(pp!=0);
    return 0;
}





